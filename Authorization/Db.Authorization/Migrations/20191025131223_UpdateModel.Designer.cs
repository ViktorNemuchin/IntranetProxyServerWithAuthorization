// <auto-generated />
using System;
using Db.Authorization;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Db.Authorization.Migrations
{
    [DbContext(typeof(EntitiesContext))]
    [Migration("20191025131223_UpdateModel")]
    partial class UpdateModel
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Db.Authorization.Model.Group", b =>
                {
                    b.Property<Guid>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GroupId");

                    b.ToTable("Groups");

                    b.HasData(
                        new
                        {
                            GroupId = new Guid("42729b9e-e983-4385-af92-9ba8146797d0")
                        });
                });

            modelBuilder.Entity("Db.Authorization.Model.GroupRight", b =>
                {
                    b.Property<Guid>("GroupRightId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Module")
                        .HasColumnType("int");

                    b.Property<int>("Object")
                        .HasColumnType("int");

                    b.Property<int>("Operator")
                        .HasColumnType("int");

                    b.HasKey("GroupRightId");

                    b.HasIndex("GroupId");

                    b.ToTable("GroupRight");

                    b.HasData(
                        new
                        {
                            GroupRightId = new Guid("5721bed2-1929-449e-8cfc-5b09d56ab8d6"),
                            GroupId = new Guid("42729b9e-e983-4385-af92-9ba8146797d0"),
                            Module = 3,
                            Object = 4,
                            Operator = 1
                        },
                        new
                        {
                            GroupRightId = new Guid("fe0bf773-fd37-40bd-9504-f45b5bee0c4b"),
                            GroupId = new Guid("42729b9e-e983-4385-af92-9ba8146797d0"),
                            Module = 1,
                            Object = 1,
                            Operator = 3
                        },
                        new
                        {
                            GroupRightId = new Guid("6e42d288-c917-490a-82da-3cafa10ee720"),
                            GroupId = new Guid("42729b9e-e983-4385-af92-9ba8146797d0"),
                            Module = 3,
                            Object = 4,
                            Operator = 3
                        });
                });

            modelBuilder.Entity("Db.Authorization.Model.Role", b =>
                {
                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserExtendedId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RoleId");

                    b.HasIndex("UserExtendedId")
                        .IsUnique();

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("e21854f4-9195-41bf-ab7e-8d67a3a9d13e"),
                            UserExtendedId = new Guid("e42b1599-b09b-4660-8f3b-9631e549eabc")
                        });
                });

            modelBuilder.Entity("Db.Authorization.Model.RoleRight", b =>
                {
                    b.Property<Guid>("RoleRightId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Module")
                        .HasColumnType("int");

                    b.Property<int>("Object")
                        .HasColumnType("int");

                    b.Property<int>("Operator")
                        .HasColumnType("int");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserExtendedId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RoleRightId");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleRight");

                    b.HasData(
                        new
                        {
                            RoleRightId = new Guid("2660709e-6fc1-4ff6-b0f2-ae214b630452"),
                            Module = 3,
                            Object = 4,
                            Operator = 1,
                            RoleId = new Guid("e21854f4-9195-41bf-ab7e-8d67a3a9d13e"),
                            UserExtendedId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            RoleRightId = new Guid("01c6d0e1-6036-40dd-ba58-8e8e8545e099"),
                            Module = 1,
                            Object = 1,
                            Operator = 3,
                            RoleId = new Guid("e21854f4-9195-41bf-ab7e-8d67a3a9d13e"),
                            UserExtendedId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            RoleRightId = new Guid("05ba54bc-8adc-4634-bfdb-d4f9c6203cf7"),
                            Module = 3,
                            Object = 4,
                            Operator = 3,
                            RoleId = new Guid("e21854f4-9195-41bf-ab7e-8d67a3a9d13e"),
                            UserExtendedId = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("Db.Authorization.Model.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Login")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserExtendedId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId");

                    b.HasIndex("UserExtendedId")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("7bd06515-3618-43d1-b5f4-c5734a5101e1"),
                            Login = "Miha",
                            Password = "1234",
                            Token = "",
                            UserExtendedId = new Guid("e42b1599-b09b-4660-8f3b-9631e549eabc")
                        });
                });

            modelBuilder.Entity("Db.Authorization.Model.UserExtended", b =>
                {
                    b.Property<Guid>("UserExtendedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserExtendedId");

                    b.ToTable("UsersExtended");

                    b.HasData(
                        new
                        {
                            UserExtendedId = new Guid("e42b1599-b09b-4660-8f3b-9631e549eabc"),
                            FirstName = "Mickhail",
                            LastName = "Koriaka"
                        });
                });

            modelBuilder.Entity("Db.Authorization.Model.UserExtendedGroup", b =>
                {
                    b.Property<Guid>("UserExtendedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserExtendedId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("UserExtendedGroup");

                    b.HasData(
                        new
                        {
                            UserExtendedId = new Guid("e42b1599-b09b-4660-8f3b-9631e549eabc"),
                            GroupId = new Guid("42729b9e-e983-4385-af92-9ba8146797d0")
                        });
                });

            modelBuilder.Entity("Db.Authorization.Model.GroupRight", b =>
                {
                    b.HasOne("Db.Authorization.Model.Group", "Group")
                        .WithMany("GroupRights")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Db.Authorization.Model.Role", b =>
                {
                    b.HasOne("Db.Authorization.Model.UserExtended", "User")
                        .WithOne("Role")
                        .HasForeignKey("Db.Authorization.Model.Role", "UserExtendedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Db.Authorization.Model.RoleRight", b =>
                {
                    b.HasOne("Db.Authorization.Model.Role", "Role")
                        .WithMany("RoleRights")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Db.Authorization.Model.User", b =>
                {
                    b.HasOne("Db.Authorization.Model.UserExtended", null)
                        .WithOne("User")
                        .HasForeignKey("Db.Authorization.Model.User", "UserExtendedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Db.Authorization.Model.UserExtendedGroup", b =>
                {
                    b.HasOne("Db.Authorization.Model.Group", "Group")
                        .WithMany("UserExtendedGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Db.Authorization.Model.UserExtended", "User")
                        .WithMany("UserExtendedGroups")
                        .HasForeignKey("UserExtendedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
