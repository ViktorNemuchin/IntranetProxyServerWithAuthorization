// <auto-generated />
using System;
using Db.Authorization;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Db.Authorization.Migrations
{
    [DbContext(typeof(EntitiesContext))]
    [Migration("20191025133532_DeleteUser")]
    partial class DeleteUser
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Db.Authorization.Model.Group", b =>
                {
                    b.Property<Guid>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GroupId");

                    b.ToTable("Groups");

                    b.HasData(
                        new
                        {
                            GroupId = new Guid("c54083b8-b895-4cda-83fc-ed954bd79709")
                        });
                });

            modelBuilder.Entity("Db.Authorization.Model.GroupRight", b =>
                {
                    b.Property<Guid>("GroupRightId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Module")
                        .HasColumnType("int");

                    b.Property<int>("Object")
                        .HasColumnType("int");

                    b.Property<int>("Operator")
                        .HasColumnType("int");

                    b.HasKey("GroupRightId");

                    b.HasIndex("GroupId");

                    b.ToTable("GroupRight");

                    b.HasData(
                        new
                        {
                            GroupRightId = new Guid("2478dabe-a679-4400-a042-c94ef2e4b6a1"),
                            GroupId = new Guid("c54083b8-b895-4cda-83fc-ed954bd79709"),
                            Module = 3,
                            Object = 4,
                            Operator = 1
                        },
                        new
                        {
                            GroupRightId = new Guid("e8440ed7-61fd-41d7-88a6-8607e2b6afaa"),
                            GroupId = new Guid("c54083b8-b895-4cda-83fc-ed954bd79709"),
                            Module = 1,
                            Object = 1,
                            Operator = 3
                        },
                        new
                        {
                            GroupRightId = new Guid("17cf0164-f388-4c7c-a487-375aeb8aa3bd"),
                            GroupId = new Guid("c54083b8-b895-4cda-83fc-ed954bd79709"),
                            Module = 3,
                            Object = 4,
                            Operator = 3
                        });
                });

            modelBuilder.Entity("Db.Authorization.Model.Role", b =>
                {
                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserExtendedId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RoleId");

                    b.HasIndex("UserExtendedId")
                        .IsUnique();

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("b1596090-3830-4c51-81a6-c87bb043e976"),
                            UserExtendedId = new Guid("41ebf740-2e52-41a1-9dbb-d71b3389f6e4")
                        });
                });

            modelBuilder.Entity("Db.Authorization.Model.RoleRight", b =>
                {
                    b.Property<Guid>("RoleRightId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Module")
                        .HasColumnType("int");

                    b.Property<int>("Object")
                        .HasColumnType("int");

                    b.Property<int>("Operator")
                        .HasColumnType("int");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserExtendedId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RoleRightId");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleRight");

                    b.HasData(
                        new
                        {
                            RoleRightId = new Guid("ac419b3f-3052-4d60-bc86-b4c1fd810175"),
                            Module = 3,
                            Object = 4,
                            Operator = 1,
                            RoleId = new Guid("b1596090-3830-4c51-81a6-c87bb043e976"),
                            UserExtendedId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            RoleRightId = new Guid("200ef3ee-2068-4765-816c-205ff2b23f80"),
                            Module = 1,
                            Object = 1,
                            Operator = 3,
                            RoleId = new Guid("b1596090-3830-4c51-81a6-c87bb043e976"),
                            UserExtendedId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            RoleRightId = new Guid("2b7697db-54a0-4d95-af5c-c270f6c618c0"),
                            Module = 3,
                            Object = 4,
                            Operator = 3,
                            RoleId = new Guid("b1596090-3830-4c51-81a6-c87bb043e976"),
                            UserExtendedId = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("Db.Authorization.Model.UserExtended", b =>
                {
                    b.Property<Guid>("UserExtendedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Login")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserExtendedId");

                    b.ToTable("UsersExtended");

                    b.HasData(
                        new
                        {
                            UserExtendedId = new Guid("41ebf740-2e52-41a1-9dbb-d71b3389f6e4"),
                            FirstName = "Mickhail",
                            LastName = "Koriaka",
                            Login = "Miha",
                            Password = "1234",
                            Token = ""
                        });
                });

            modelBuilder.Entity("Db.Authorization.Model.UserExtendedGroup", b =>
                {
                    b.Property<Guid>("UserExtendedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserExtendedId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("UserExtendedGroup");

                    b.HasData(
                        new
                        {
                            UserExtendedId = new Guid("41ebf740-2e52-41a1-9dbb-d71b3389f6e4"),
                            GroupId = new Guid("c54083b8-b895-4cda-83fc-ed954bd79709")
                        });
                });

            modelBuilder.Entity("Db.Authorization.Model.GroupRight", b =>
                {
                    b.HasOne("Db.Authorization.Model.Group", "Group")
                        .WithMany("GroupRights")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Db.Authorization.Model.Role", b =>
                {
                    b.HasOne("Db.Authorization.Model.UserExtended", "User")
                        .WithOne("Role")
                        .HasForeignKey("Db.Authorization.Model.Role", "UserExtendedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Db.Authorization.Model.RoleRight", b =>
                {
                    b.HasOne("Db.Authorization.Model.Role", "Role")
                        .WithMany("RoleRights")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Db.Authorization.Model.UserExtendedGroup", b =>
                {
                    b.HasOne("Db.Authorization.Model.Group", "Group")
                        .WithMany("UserExtendedGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Db.Authorization.Model.UserExtended", "User")
                        .WithMany("UserExtendedGroups")
                        .HasForeignKey("UserExtendedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
